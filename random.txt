In this paper, we introduce two novel solutions to simplify Formal Verification:

To begin with, we have built an automation framework based on Python that facilitates smooth generation of a Formal testbench with a defined structure. Based on some user-specified inputs like directory names, clock and reset signals, and Verification IP (VIP) information, the script configures the testbench automatically, performs the required bindings, and has a scalable and efficient environment in place for testing different design pieces, including protocols.

Second, we present an AI-based model intended to close the gap between specification and verification. The model takes as input a spreadsheet with high-level property descriptions in natural language and converts them into complete Formal checkers. These checkers, including assertions, assumptions, and coverage statements, are created in a plug-and-play form, cutting down on manual labor and enhancing verification efficiency.

These solutions drive Formal Verification adoption faster, reduce human coding errors, and increase productivity, and thus they are worthwhile additions to the verification process.
